syntax = "proto3";
package script;
option go_package = "github.com/Syncano/orion/app/proto/codebox/script";

service ScriptRunner {
  // Run runs script in secure environment of worker.
  rpc Run (stream RunRequest) returns (stream RunResponse);
}

// RunRequest represents either a Meta message or a Chunk message. 
// It should always consist of exactly 1 Meta and optionally repeated Chunk messages.
message RunRequest {
  // Meta message specifies fields to describe what is being run. 
  message MetaMessage {
    string runtime = 1; // Runtime name.
    string sourceHash = 2; // Unique hash describing script sources.
    string userID = 3; // Unique key relevant for user context. 

    message OptionsMessage {
      string entryPoint = 1; // If empty, uses default entrypoint for specified runtime.
      uint32 outputLimit = 2; // If 0, will not hijack any output.
      int64 timeout = 3; // Timeout is meant to be in milliseconds. If 0 takes a default 30s value.
      uint32 mCPU = 7; // MCPU is CPU constaints in milliseconds. If 0 takes a default 250 value.

      // Empty args, config, meta are acceptable.
      bytes args = 4;
      bytes config = 5;
      bytes meta = 6;
    }
    OptionsMessage options = 5;
    string environment = 6; // Optional unique string describing script environment file.
  }
  message ChunkMessage {
    string name = 1;
    string filename = 2;
    string contentType = 3;
    bytes data = 4;
  }

  oneof value {
    MetaMessage meta = 1;
    ChunkMessage chunk = 2;
  }
}

// HTTPResponseMessage describes custom response from script.
message HTTPResponseMessage {
  int32 statusCode = 1;
  string contentType = 2;
  bytes content = 3;
  map<string, string> headers = 4;
}

message RunResponse {
  int32 code = 1;
  bytes stdout = 2;
  bytes stderr = 3;
  HTTPResponseMessage response = 4;
  int64 took = 5;
  bool cached = 6;
  int64 time = 7;
  uint32 weight = 8;
}

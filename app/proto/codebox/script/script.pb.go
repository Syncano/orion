// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/proto/codebox/script/script.proto

/*
	Package script is a generated protocol buffer package.

	It is generated from these files:
		app/proto/codebox/script/script.proto

	It has these top-level messages:
		RunRequest
		HTTPResponseMessage
		RunResponse
*/
package script

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RunRequest represents either a Meta message or a Chunk message.
// It should always consist of exactly 1 Meta and optionally repeated Chunk messages.
type RunRequest struct {
	// Types that are valid to be assigned to Value:
	//	*RunRequest_Meta
	//	*RunRequest_Chunk
	Value isRunRequest_Value `protobuf_oneof:"value"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptorScript, []int{0} }

type isRunRequest_Value interface {
	isRunRequest_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RunRequest_Meta struct {
	Meta *RunRequest_MetaMessage `protobuf:"bytes,1,opt,name=meta,oneof"`
}
type RunRequest_Chunk struct {
	Chunk *RunRequest_ChunkMessage `protobuf:"bytes,2,opt,name=chunk,oneof"`
}

func (*RunRequest_Meta) isRunRequest_Value()  {}
func (*RunRequest_Chunk) isRunRequest_Value() {}

func (m *RunRequest) GetValue() isRunRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RunRequest) GetMeta() *RunRequest_MetaMessage {
	if x, ok := m.GetValue().(*RunRequest_Meta); ok {
		return x.Meta
	}
	return nil
}

func (m *RunRequest) GetChunk() *RunRequest_ChunkMessage {
	if x, ok := m.GetValue().(*RunRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RunRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RunRequest_OneofMarshaler, _RunRequest_OneofUnmarshaler, _RunRequest_OneofSizer, []interface{}{
		(*RunRequest_Meta)(nil),
		(*RunRequest_Chunk)(nil),
	}
}

func _RunRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RunRequest)
	// value
	switch x := m.Value.(type) {
	case *RunRequest_Meta:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case *RunRequest_Chunk:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RunRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _RunRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RunRequest)
	switch tag {
	case 1: // value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunRequest_MetaMessage)
		err := b.DecodeMessage(msg)
		m.Value = &RunRequest_Meta{msg}
		return true, err
	case 2: // value.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunRequest_ChunkMessage)
		err := b.DecodeMessage(msg)
		m.Value = &RunRequest_Chunk{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RunRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RunRequest)
	// value
	switch x := m.Value.(type) {
	case *RunRequest_Meta:
		s := proto.Size(x.Meta)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RunRequest_Chunk:
		s := proto.Size(x.Chunk)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Meta message specifies fields to describe what is being run.
type RunRequest_MetaMessage struct {
	Runtime     string                                 `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	SourceHash  string                                 `protobuf:"bytes,2,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	UserID      string                                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Options     *RunRequest_MetaMessage_OptionsMessage `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	Environment string                                 `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (m *RunRequest_MetaMessage) Reset()                    { *m = RunRequest_MetaMessage{} }
func (m *RunRequest_MetaMessage) String() string            { return proto.CompactTextString(m) }
func (*RunRequest_MetaMessage) ProtoMessage()               {}
func (*RunRequest_MetaMessage) Descriptor() ([]byte, []int) { return fileDescriptorScript, []int{0, 0} }

func (m *RunRequest_MetaMessage) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *RunRequest_MetaMessage) GetSourceHash() string {
	if m != nil {
		return m.SourceHash
	}
	return ""
}

func (m *RunRequest_MetaMessage) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RunRequest_MetaMessage) GetOptions() *RunRequest_MetaMessage_OptionsMessage {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RunRequest_MetaMessage) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

type RunRequest_MetaMessage_OptionsMessage struct {
	EntryPoint  string `protobuf:"bytes,1,opt,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	OutputLimit uint32 `protobuf:"varint,2,opt,name=outputLimit,proto3" json:"outputLimit,omitempty"`
	Timeout     int64  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MCPU        uint32 `protobuf:"varint,7,opt,name=mCPU,proto3" json:"mCPU,omitempty"`
	// Empty args, config, meta are acceptable.
	Args   []byte `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Config []byte `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Meta   []byte `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *RunRequest_MetaMessage_OptionsMessage) Reset()         { *m = RunRequest_MetaMessage_OptionsMessage{} }
func (m *RunRequest_MetaMessage_OptionsMessage) String() string { return proto.CompactTextString(m) }
func (*RunRequest_MetaMessage_OptionsMessage) ProtoMessage()    {}
func (*RunRequest_MetaMessage_OptionsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorScript, []int{0, 0, 0}
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetOutputLimit() uint32 {
	if m != nil {
		return m.OutputLimit
	}
	return 0
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetMCPU() uint32 {
	if m != nil {
		return m.MCPU
	}
	return 0
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RunRequest_MetaMessage_OptionsMessage) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type RunRequest_ChunkMessage struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Filename    string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RunRequest_ChunkMessage) Reset()                    { *m = RunRequest_ChunkMessage{} }
func (m *RunRequest_ChunkMessage) String() string            { return proto.CompactTextString(m) }
func (*RunRequest_ChunkMessage) ProtoMessage()               {}
func (*RunRequest_ChunkMessage) Descriptor() ([]byte, []int) { return fileDescriptorScript, []int{0, 1} }

func (m *RunRequest_ChunkMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunRequest_ChunkMessage) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *RunRequest_ChunkMessage) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *RunRequest_ChunkMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// HTTPResponseMessage describes custom response from script.
type HTTPResponseMessage struct {
	StatusCode  int32             `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	ContentType string            `protobuf:"bytes,2,opt,name=contentType,proto3" json:"contentType,omitempty"`
	Content     []byte            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Headers     map[string]string `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HTTPResponseMessage) Reset()                    { *m = HTTPResponseMessage{} }
func (m *HTTPResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponseMessage) ProtoMessage()               {}
func (*HTTPResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptorScript, []int{1} }

func (m *HTTPResponseMessage) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HTTPResponseMessage) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *HTTPResponseMessage) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *HTTPResponseMessage) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type RunResponse struct {
	Code     int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Stdout   []byte               `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   []byte               `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Response *HTTPResponseMessage `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
	Took     int64                `protobuf:"varint,5,opt,name=took,proto3" json:"took,omitempty"`
	Cached   bool                 `protobuf:"varint,6,opt,name=cached,proto3" json:"cached,omitempty"`
	Time     int64                `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	Weight   uint32               `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *RunResponse) Reset()                    { *m = RunResponse{} }
func (m *RunResponse) String() string            { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()               {}
func (*RunResponse) Descriptor() ([]byte, []int) { return fileDescriptorScript, []int{2} }

func (m *RunResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RunResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *RunResponse) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *RunResponse) GetResponse() *HTTPResponseMessage {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RunResponse) GetTook() int64 {
	if m != nil {
		return m.Took
	}
	return 0
}

func (m *RunResponse) GetCached() bool {
	if m != nil {
		return m.Cached
	}
	return false
}

func (m *RunResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RunResponse) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "script.RunRequest")
	proto.RegisterType((*RunRequest_MetaMessage)(nil), "script.RunRequest.MetaMessage")
	proto.RegisterType((*RunRequest_MetaMessage_OptionsMessage)(nil), "script.RunRequest.MetaMessage.OptionsMessage")
	proto.RegisterType((*RunRequest_ChunkMessage)(nil), "script.RunRequest.ChunkMessage")
	proto.RegisterType((*HTTPResponseMessage)(nil), "script.HTTPResponseMessage")
	proto.RegisterType((*RunResponse)(nil), "script.RunResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScriptRunner service

type ScriptRunnerClient interface {
	// Run runs script in secure environment of worker.
	Run(ctx context.Context, opts ...grpc.CallOption) (ScriptRunner_RunClient, error)
}

type scriptRunnerClient struct {
	cc *grpc.ClientConn
}

func NewScriptRunnerClient(cc *grpc.ClientConn) ScriptRunnerClient {
	return &scriptRunnerClient{cc}
}

func (c *scriptRunnerClient) Run(ctx context.Context, opts ...grpc.CallOption) (ScriptRunner_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ScriptRunner_serviceDesc.Streams[0], c.cc, "/script.ScriptRunner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptRunnerRunClient{stream}
	return x, nil
}

type ScriptRunner_RunClient interface {
	Send(*RunRequest) error
	Recv() (*RunResponse, error)
	grpc.ClientStream
}

type scriptRunnerRunClient struct {
	grpc.ClientStream
}

func (x *scriptRunnerRunClient) Send(m *RunRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scriptRunnerRunClient) Recv() (*RunResponse, error) {
	m := new(RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ScriptRunner service

type ScriptRunnerServer interface {
	// Run runs script in secure environment of worker.
	Run(ScriptRunner_RunServer) error
}

func RegisterScriptRunnerServer(s *grpc.Server, srv ScriptRunnerServer) {
	s.RegisterService(&_ScriptRunner_serviceDesc, srv)
}

func _ScriptRunner_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScriptRunnerServer).Run(&scriptRunnerRunServer{stream})
}

type ScriptRunner_RunServer interface {
	Send(*RunResponse) error
	Recv() (*RunRequest, error)
	grpc.ServerStream
}

type scriptRunnerRunServer struct {
	grpc.ServerStream
}

func (x *scriptRunnerRunServer) Send(m *RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scriptRunnerRunServer) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ScriptRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "script.ScriptRunner",
	HandlerType: (*ScriptRunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _ScriptRunner_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "app/proto/codebox/script/script.proto",
}

func (m *RunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *RunRequest_Meta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *RunRequest_Chunk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Chunk != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Chunk.Size()))
		n3, err := m.Chunk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *RunRequest_MetaMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest_MetaMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Runtime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Runtime)))
		i += copy(dAtA[i:], m.Runtime)
	}
	if len(m.SourceHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.SourceHash)))
		i += copy(dAtA[i:], m.SourceHash)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if m.Options != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Options.Size()))
		n4, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	return i, nil
}

func (m *RunRequest_MetaMessage_OptionsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest_MetaMessage_OptionsMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntryPoint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.EntryPoint)))
		i += copy(dAtA[i:], m.EntryPoint)
	}
	if m.OutputLimit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.OutputLimit))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Timeout))
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if m.MCPU != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.MCPU))
	}
	return i, nil
}

func (m *RunRequest_ChunkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest_ChunkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Filename) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *HTTPResponseMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPResponseMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x22
			i++
			v := m.Headers[k]
			mapSize := 1 + len(k) + sovScript(uint64(len(k))) + 1 + len(v) + sovScript(uint64(len(v)))
			i = encodeVarintScript(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintScript(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintScript(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *RunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Code))
	}
	if len(m.Stdout) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Stdout)))
		i += copy(dAtA[i:], m.Stdout)
	}
	if len(m.Stderr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScript(dAtA, i, uint64(len(m.Stderr)))
		i += copy(dAtA[i:], m.Stderr)
	}
	if m.Response != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Response.Size()))
		n5, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Took != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Took))
	}
	if m.Cached {
		dAtA[i] = 0x30
		i++
		if m.Cached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Time != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Time))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintScript(dAtA, i, uint64(m.Weight))
	}
	return i, nil
}

func encodeVarintScript(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RunRequest) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *RunRequest_Meta) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovScript(uint64(l))
	}
	return n
}
func (m *RunRequest_Chunk) Size() (n int) {
	var l int
	_ = l
	if m.Chunk != nil {
		l = m.Chunk.Size()
		n += 1 + l + sovScript(uint64(l))
	}
	return n
}
func (m *RunRequest_MetaMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.SourceHash)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	return n
}

func (m *RunRequest_MetaMessage_OptionsMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntryPoint)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	if m.OutputLimit != 0 {
		n += 1 + sovScript(uint64(m.OutputLimit))
	}
	if m.Timeout != 0 {
		n += 1 + sovScript(uint64(m.Timeout))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	if m.MCPU != 0 {
		n += 1 + sovScript(uint64(m.MCPU))
	}
	return n
}

func (m *RunRequest_ChunkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	return n
}

func (m *HTTPResponseMessage) Size() (n int) {
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovScript(uint64(m.StatusCode))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovScript(uint64(len(k))) + 1 + len(v) + sovScript(uint64(len(v)))
			n += mapEntrySize + 1 + sovScript(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RunResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovScript(uint64(m.Code))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovScript(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovScript(uint64(l))
	}
	if m.Took != 0 {
		n += 1 + sovScript(uint64(m.Took))
	}
	if m.Cached {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovScript(uint64(m.Time))
	}
	if m.Weight != 0 {
		n += 1 + sovScript(uint64(m.Weight))
	}
	return n
}

func sovScript(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScript(x uint64) (n int) {
	return sovScript(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunRequest_MetaMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RunRequest_Meta{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunRequest_ChunkMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RunRequest_Chunk{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunRequest_MetaMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &RunRequest_MetaMessage_OptionsMessage{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunRequest_MetaMessage_OptionsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputLimit", wireType)
			}
			m.OutputLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MCPU", wireType)
			}
			m.MCPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MCPU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunRequest_ChunkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPResponseMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPResponseMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPResponseMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScript
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScript
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScript
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScript
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthScript
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScript(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScript
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = append(m.Stdout[:0], dAtA[iNdEx:postIndex]...)
			if m.Stdout == nil {
				m.Stdout = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = append(m.Stderr[:0], dAtA[iNdEx:postIndex]...)
			if m.Stderr == nil {
				m.Stderr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScript
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &HTTPResponseMessage{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Took", wireType)
			}
			m.Took = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Took |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cached = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScript(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScript
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScript
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScript
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScript(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScript = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScript   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/proto/codebox/script/script.proto", fileDescriptorScript) }

var fileDescriptorScript = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xee, 0x26, 0xcd, 0x4f, 0x27, 0x01, 0x21, 0x17, 0x55, 0xab, 0x20, 0x85, 0xaa, 0x12, 0x52,
	0x2e, 0x24, 0x10, 0x90, 0x8a, 0x7a, 0x4c, 0x40, 0x04, 0x89, 0x8a, 0xca, 0x2d, 0x17, 0x6e, 0xee,
	0x66, 0x9a, 0xac, 0xda, 0xd8, 0x8b, 0x7f, 0x0a, 0x79, 0x05, 0x24, 0xee, 0x3c, 0x0e, 0x47, 0x8e,
	0x3c, 0x02, 0x0a, 0x4f, 0xc0, 0x1b, 0x20, 0xcf, 0x7a, 0xdb, 0x2d, 0x2d, 0x3d, 0xed, 0x7c, 0xe3,
	0x6f, 0x3c, 0xf3, 0xcd, 0x8c, 0x17, 0x1e, 0x89, 0x2c, 0x1b, 0x64, 0x5a, 0x59, 0x35, 0x48, 0xd4,
	0x14, 0x8f, 0xd5, 0xe7, 0x81, 0x49, 0x74, 0x9a, 0xd9, 0xf0, 0xe9, 0xd3, 0x19, 0xab, 0xe7, 0x68,
	0xe7, 0x4b, 0x0d, 0x80, 0x3b, 0xc9, 0xf1, 0xa3, 0x43, 0x63, 0xd9, 0x73, 0x58, 0x5f, 0xa0, 0x15,
	0x71, 0xb4, 0x1d, 0xf5, 0x5a, 0xc3, 0x6e, 0x3f, 0xc4, 0x5c, 0x32, 0xfa, 0xfb, 0x68, 0xc5, 0x3e,
	0x1a, 0x23, 0x66, 0x38, 0x59, 0xe3, 0xc4, 0x66, 0xbb, 0x50, 0x4b, 0xe6, 0x4e, 0x9e, 0xc6, 0x15,
	0x0a, 0x7b, 0x78, 0x43, 0xd8, 0xd8, 0x9f, 0x5f, 0xc6, 0xe5, 0xfc, 0xce, 0xd7, 0x2a, 0xb4, 0x4a,
	0x17, 0xb2, 0x18, 0x1a, 0xda, 0x49, 0x9b, 0x2e, 0x90, 0x2a, 0xd8, 0xe0, 0x05, 0x64, 0x5d, 0x00,
	0xa3, 0x9c, 0x4e, 0x70, 0x22, 0xcc, 0x9c, 0xf2, 0x6c, 0xf0, 0x92, 0x87, 0x6d, 0x41, 0xdd, 0x19,
	0xd4, 0x6f, 0x5e, 0xc6, 0x55, 0x3a, 0x0b, 0x88, 0xbd, 0x86, 0x86, 0xca, 0x6c, 0xaa, 0xa4, 0x89,
	0x6b, 0x54, 0xdc, 0xe3, 0xdb, 0x35, 0xf5, 0xdf, 0xe5, 0xec, 0x00, 0x79, 0x11, 0xcd, 0xb6, 0xa1,
	0x85, 0xf2, 0x3c, 0xd5, 0x4a, 0x2e, 0x50, 0xda, 0xb8, 0x4e, 0x59, 0xca, 0xae, 0xce, 0xf7, 0x08,
	0xee, 0x5e, 0x8d, 0xf6, 0x55, 0xa3, 0xb4, 0x7a, 0x79, 0xa0, 0x52, 0x69, 0x83, 0xa4, 0x92, 0xc7,
	0x5f, 0xaa, 0x9c, 0xcd, 0x9c, 0x7d, 0x9b, 0x2e, 0x52, 0x4b, 0xb2, 0xee, 0xf0, 0xb2, 0xcb, 0x77,
	0xc4, 0xeb, 0x57, 0xce, 0x92, 0xb0, 0x2a, 0x2f, 0x20, 0x63, 0xb0, 0x2e, 0xf4, 0xcc, 0xc4, 0xeb,
	0xdb, 0x51, 0xaf, 0xcd, 0xc9, 0xf6, 0x5d, 0x48, 0x94, 0x3c, 0x49, 0x67, 0x24, 0xb6, 0xcd, 0x03,
	0xf2, 0x5c, 0x1a, 0x6b, 0x3d, 0xe7, 0xd2, 0xd0, 0xbc, 0x6f, 0x7c, 0xf0, 0x3e, 0x6e, 0x50, 0x52,
	0xb2, 0x3b, 0x16, 0xda, 0xe5, 0x41, 0x79, 0x8e, 0x14, 0x17, 0xc3, 0x20, 0x9b, 0x75, 0xa0, 0x79,
	0x92, 0x9e, 0x21, 0xf9, 0xf3, 0x39, 0x5c, 0x60, 0xaf, 0x27, 0x51, 0xd2, 0xa2, 0xb4, 0x47, 0xcb,
	0x0c, 0xc3, 0x28, 0xca, 0x2e, 0x7f, 0xe3, 0x54, 0x58, 0x51, 0x54, 0xed, 0xed, 0x51, 0x03, 0x6a,
	0xe7, 0xe2, 0xcc, 0xe1, 0xce, 0x9f, 0x08, 0x36, 0x27, 0x47, 0x47, 0x07, 0x1c, 0x4d, 0xa6, 0xa4,
	0xc1, 0x52, 0x1b, 0x8d, 0x15, 0xd6, 0x99, 0xb1, 0x9a, 0xe6, 0xc5, 0xd4, 0x78, 0xc9, 0xf3, 0x6f,
	0xda, 0xca, 0xf5, 0xb4, 0x31, 0x34, 0x02, 0xa4, 0xa2, 0xda, 0xbc, 0x80, 0x6c, 0x04, 0x8d, 0x39,
	0x8a, 0x29, 0x6a, 0xdf, 0xc9, 0x6a, 0xaf, 0x35, 0xec, 0x15, 0x0b, 0x72, 0x43, 0x25, 0xfd, 0x49,
	0x4e, 0x7d, 0xe5, 0x47, 0xc8, 0x8b, 0xc0, 0xce, 0x1e, 0xb4, 0xcb, 0x07, 0xec, 0x1e, 0x54, 0x4f,
	0x71, 0x19, 0xba, 0xe6, 0x4d, 0x76, 0x3f, 0x48, 0x0c, 0xb5, 0xe5, 0x60, 0xaf, 0xf2, 0x22, 0xda,
	0x59, 0x45, 0xd0, 0xa2, 0x55, 0xcc, 0x13, 0xf9, 0x06, 0x25, 0x97, 0x2a, 0xc9, 0xf6, 0x63, 0x35,
	0x76, 0xea, 0x77, 0xa0, 0x92, 0x8f, 0x35, 0x47, 0xc1, 0x8f, 0x5a, 0x07, 0x51, 0x01, 0xb1, 0x5d,
	0x68, 0xea, 0x70, 0x1f, 0x35, 0xba, 0x35, 0x7c, 0x70, 0x8b, 0x28, 0x7e, 0x41, 0xf6, 0xc9, 0xad,
	0x52, 0xa7, 0xb4, 0x3d, 0x55, 0x4e, 0x36, 0xed, 0x94, 0x48, 0xe6, 0x38, 0xa5, 0xed, 0x69, 0xf2,
	0x80, 0x88, 0xeb, 0x1f, 0x6a, 0x23, 0x70, 0xfd, 0x2b, 0xdd, 0x82, 0xfa, 0x27, 0x4c, 0x67, 0x73,
	0x1b, 0x37, 0x69, 0xab, 0x02, 0x1a, 0x8e, 0xa0, 0x7d, 0x48, 0xf9, 0xb9, 0x93, 0x12, 0x35, 0x1b,
	0x42, 0x95, 0x3b, 0xc9, 0xd8, 0xf5, 0xb7, 0xd8, 0xd9, 0xbc, 0xe2, 0xcb, 0xeb, 0xea, 0x45, 0x4f,
	0xa2, 0xd1, 0xf8, 0xc7, 0xaa, 0x1b, 0xfd, 0x5c, 0x75, 0xa3, 0x5f, 0xab, 0x6e, 0xf4, 0xed, 0x77,
	0x77, 0xed, 0xc3, 0xd3, 0x59, 0x6a, 0xe7, 0xee, 0xb8, 0x9f, 0xa8, 0xc5, 0xe0, 0x70, 0x29, 0x13,
	0x21, 0xd5, 0x40, 0xe9, 0x54, 0xc9, 0xc1, 0xff, 0xfe, 0x81, 0xc7, 0x75, 0xf2, 0x3e, 0xfb, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x84, 0x8d, 0xa5, 0x26, 0x05, 0x00, 0x00,
}
